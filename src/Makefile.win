#
# Makefile for Windows systems using gmake
#
#
# Try "make" to do a default build, using cygwin.
#
# Try "make CONSOLE=yes" to use PDCurses, as long as you set
# PDCURSES_INCLUDE_DIR and PDCURSES_LIB.
#
# For a better looking Windows console, follow the instructions at
# https://trac.rephial.org/wiki/Compiling
#
# Other options:
#   OBJ_DIR=x will place .o files into directory 'x'
#   MINGW=yes will use the mingw compiler
#

# Executable name and default target
EXE = nppangband.exe
all: ../$(EXE)

ifneq (,$(findstring \SYSTEM32,$(PATH)))
  dos = TRUE
endif
ifneq (,$(findstring \system32,$(PATH)))
  dos = TRUE
endif

ifdef dos
  CP = copy
  RM = del
  BAR = "\"
else
  CP = -cp
  RM = -rm
  BAR = "/"
endif

ifndef MINGW
  CYGWIN=yes
endif

# Include list of object files and add system-specific ones
include Makefile.inc
MAINFILES="$(WINMAINFILES)"

ifdef CONSOLE
  CFLAGS = -DUSE_GCU -DWIN32_CONSOLE_MODE -I$(PDCURSES_INC)
  LIBS = -s $(PDCURSES_LIB)
  IOBJS = $(BASEOBJS) main-gcu.o main.o

  #PDCURSES_INC = ../../pdcurses/include
  #PDCURSES_LIB = ../../pdcurses/lib/pdcurses.a
else
  CFLAGS = -DWINDOWS -static

  #CFLAGS += -Iwin/include -Lwin/lib
  #LDFLAGS += -Lwin/lib

  IOBJS = $(BASEOBJS) $(PROGNAME).res $(SOUNDFILES) main-win.o readdib.o
  #LIBS = -mwindows -lwinmm -lzlib -llibpng -lmsimg32
  LIBS = -mwindows -lwinmm
endif

CC = $(CROSS)gcc
WRES = $(CROSS)windres
WARNINGS = -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
#CFLAGS += $(WARNINGS) -std=c99 -DUSE_PRIVATE_PATHS -DSOUND -O2 -I.
CFLAGS += $(WARNINGS) -std=c99 -DUSE_PRIVATE_PATHS -DSOUND -g -I.

ifdef BUILD_ID
  CFLAGS += -DBUILD_ID="$(BUILD_ID)"
endif

ifdef CYGWIN

  LIBS += -mno-cygwin -e _mainCRTStartup
  CFLAGS += -mno-cygwin

  # Note the additional -DNEAR= flag to cope with the 'NEAR'
  # keyword used in readdib.c
  readdib.o: readdib.c readdib.h
	$(CC) $(CFLAGS) -DNEAR= $(INCDIRS) -c -o $@ $<

endif


# Handle cross compiles
ifdef CROSS
  CFLAGS += -DCROSS_COMPILE

  ifdef MINGW
    # This is an issue on mingw32 on linux
    CFLAGS += -D_stdcall=
  endif
endif

# Handle object output in a different directory
ifdef OBJDIR
  OBJS = $(patsubst %.o, $(OBJDIR)%.o, $(IOBJS))
  mkdirs:; -mkdir -p $(OBJDIR) $(OBJDIR)win
  $(EXE): mkdirs
else
  OBJS = $(IOBJS)
endif



#
# Targets
#

../$(EXE): $(EXE)
	$(CP) $(EXE) ..	

$(EXE): $(OBJS)
	$(CC) $(CFLAGS) -o $(EXE) $(OBJS) $(LIBS)

clean:
	$(RM) -f $(EXE) $(OBJS)	

#
# Rules
#

$(PROGNAME).res: $(PROGNAME).rc
	$(WRES) $< -O coff -o $@

$(OBJDIR)%.o: %.c $(INCS)
	$(CC) $(CFLAGS) -c -o $@ $<
